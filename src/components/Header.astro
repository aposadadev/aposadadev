---
const links = [
  { name: "About", href: "#about" },
  { name: "Experience", href: "#experience" },
  { name: "Work", href: "#work" },
  { name: "Contact", href: "#contact" },
];
---

<header
  class="fixed top-0 left-0 right-0 z-[1000] bg-transparent backdrop-blur-none border-b border-transparent transition-all duration-300 ease-out h-20 header-container"
>
  <div
    class="max-w-[1250px] mx-auto px-6 lg:px-12 h-full flex items-center justify-between"
  >
    <!-- Logo/Brand -->
    <div class="z-[1001]">
      <a
        href="#"
        class="flex items-center no-underline transition-all duration-300 group"
      >
        <span
          class="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent transition-all duration-300 brand-text group-hover:scale-105"
          >AP</span
        >
      </a>
    </div>

    <!-- Desktop Navigation -->
    <nav class="hidden md:block">
      <ul class="flex items-center gap-10 lg:gap-12 list-none m-0 p-0">
        {
          links.map((link, index) => (
            <li class="relative">
              <a
                href={link.href}
                class="nav-link flex items-center gap-2 no-underline text-white/90 text-sm lg:text-base font-medium transition-all duration-300 py-2 relative hover:text-cyan-400 hover:-translate-y-0.5"
              >
                <span class="text-cyan-400 text-xs lg:text-sm font-medium nav-number">
                  0{index + 1}.
                </span>
                {link.name}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>

    <!-- Mobile Menu Button -->
    <div class="block md:hidden z-[1001]">
      <button
        class="mobile-menu-button flex flex-col justify-center items-center w-8 h-8 bg-transparent border-none cursor-pointer p-0 gap-1 transition-all duration-300"
        aria-label="Toggle menu"
      >
        <span
          class="hamburger-line w-6 h-0.5 rounded-sm transition-all duration-300 origin-center"
        ></span>
        <span
          class="hamburger-line w-6 h-0.5 rounded-sm transition-all duration-300 origin-center"
        ></span>
        <span
          class="hamburger-line w-6 h-0.5 rounded-sm transition-all duration-300 origin-center"
        ></span>
      </button>
    </div>

    <!-- Mobile Sidebar -->
    <div
      class="mobile-sidebar fixed top-0 left-0 right-0 bottom-0 z-[999] invisible opacity-0 transition-all duration-300"
    >
      <div
        class="mobile-sidebar-overlay absolute inset-0 bg-black/80 backdrop-blur-sm"
      >
      </div>
      <div
        class="mobile-sidebar-content absolute top-0 right-0 w-72 h-screen bg-slate-900/95 backdrop-blur-xl border-l border-cyan-400/20 translate-x-full transition-transform duration-300 flex flex-col"
      >
        <div
          class="flex justify-end items-center h-20 px-6 border-b border-white/10"
        >
          <button
            class="mobile-close-button flex items-center justify-center w-10 h-10 bg-transparent border-none cursor-pointer text-white/80 transition-all duration-300 rounded-full hover:text-cyan-400 hover:bg-cyan-400/10"
            aria-label="Close menu"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              stroke-width="2"
              stroke="currentColor"
              fill="none"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M18 6L6 18M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <nav class="flex-1 p-8 px-6">
          <ul class="list-none m-0 p-0 flex flex-col gap-6">
            {
              links.map((link, index) => (
                <li class="relative">
                  <a
                    href={link.href}
                    class="mobile-nav-link flex items-center gap-3 no-underline text-white/80 text-lg font-normal py-4 transition-all duration-300 relative hover:text-cyan-400 hover:translate-x-2"
                  >
                    <span class="text-cyan-400 text-base font-medium min-w-[2rem]">
                      0{index + 1}.
                    </span>
                    {link.name}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </div>
  </div>
</header>

<style>
  /* Header scrolled state */
  .header-container.scrolled {
    background: rgba(10, 10, 15, 0.9);
    backdrop-filter: blur(20px);
    border-bottom-color: rgba(0, 212, 255, 0.3);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  /* Header gradient line */
  .header-container::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(0, 212, 255, 0.5),
      transparent
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .header-container.scrolled::after {
    opacity: 1;
  }

  /* Brand text shadow */
  .brand-text {
    text-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
  }

  /* Nav link effects */
  .nav-link {
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
  }

  .nav-number {
    text-shadow: 0 0 10px rgba(0, 212, 255, 0.4);
  }

  .nav-link::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, #00d4ff, #9c40ff);
    transition: width 0.3s ease;
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }

  .nav-link.active {
    color: #00d4ff;
  }

  /* Hamburger lines gradient */
  .hamburger-line {
    background: linear-gradient(90deg, #00d4ff, #9c40ff);
  }

  /* Mobile menu active states */
  .mobile-menu-button.active .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translateY(6px);
  }

  .mobile-menu-button.active .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-button.active .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translateY(-6px);
  }

  .mobile-sidebar.active {
    visibility: visible;
    opacity: 1;
  }

  .mobile-sidebar.active .mobile-sidebar-content {
    transform: translateX(0);
  }

  /* Mobile nav link effects */
  .mobile-nav-link::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 0.5rem;
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, #00d4ff, #9c40ff);
    transition: width 0.3s ease;
  }

  .mobile-nav-link:hover::after,
  .mobile-nav-link.active::after {
    width: 100%;
  }

  .mobile-nav-link.active {
    color: #00d4ff;
  }

  /* Smooth scroll offset */
  html {
    scroll-padding-top: 100px;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const header = document.querySelector(".header-container") as HTMLElement;
    const mobileMenuButton = document.querySelector(
      ".mobile-menu-button"
    ) as HTMLButtonElement;
    const mobileSidebar = document.querySelector(
      ".mobile-sidebar"
    ) as HTMLElement;
    const mobileCloseButton = document.querySelector(
      ".mobile-close-button"
    ) as HTMLButtonElement;
    const mobileOverlay = document.querySelector(
      ".mobile-sidebar-overlay"
    ) as HTMLElement;
    const navLinks = document.querySelectorAll(
      ".nav-link, .mobile-nav-link"
    ) as NodeListOf<HTMLAnchorElement>;

    // Scroll effect for header
    let lastScrollTop = 0;

    // Function to check scroll position and update header
    function checkScrollPosition() {
      const scrollTop =
        window.pageYOffset || document.documentElement.scrollTop;

      if (header) {
        if (scrollTop > 80) {
          header.classList.add("scrolled");
        } else {
          header.classList.remove("scrolled");
        }
      }

      lastScrollTop = scrollTop;
    }

    // Check initial scroll position on load
    checkScrollPosition();

    window.addEventListener("scroll", checkScrollPosition);

    // Mobile menu toggle
    function toggleMobileMenu() {
      if (mobileMenuButton) {
        mobileMenuButton.classList.toggle("active");
      }
      if (mobileSidebar) {
        mobileSidebar.classList.toggle("active");
        document.body.style.overflow = mobileSidebar.classList.contains(
          "active"
        )
          ? "hidden"
          : "";
      }
    }

    function closeMobileMenu() {
      if (mobileMenuButton) {
        mobileMenuButton.classList.remove("active");
      }
      if (mobileSidebar) {
        mobileSidebar.classList.remove("active");
      }
      document.body.style.overflow = "";
    }

    // Event listeners for mobile menu
    mobileMenuButton?.addEventListener("click", toggleMobileMenu);
    mobileCloseButton?.addEventListener("click", closeMobileMenu);
    mobileOverlay?.addEventListener("click", closeMobileMenu);

    // Close mobile menu when clicking nav links
    navLinks.forEach((link) => {
      link.addEventListener("click", function (e: Event) {
        closeMobileMenu();

        // Smooth scroll to section
        const target = e.target as HTMLAnchorElement;
        const href = target.getAttribute("href");
        if (href && href.startsWith("#")) {
          e.preventDefault();
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: "smooth",
              block: "start",
            });
          }
        }
      });
    });

    // Active link highlighting based on scroll position
    function updateActiveLink() {
      const sections = document.querySelectorAll(
        "section[id]"
      ) as NodeListOf<HTMLElement>;
      const scrollPos = window.scrollY + 100;
      let activeSection = null;

      sections.forEach((section) => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        const sectionId = section.getAttribute("id");

        if (
          sectionId &&
          scrollPos >= sectionTop &&
          scrollPos < sectionTop + sectionHeight
        ) {
          activeSection = sectionId;
        }
      });

      // Remove active class from all links
      navLinks.forEach((link) => link.classList.remove("active"));

      // If we found an active section, highlight it
      if (activeSection) {
        const activeLinks = document.querySelectorAll(
          `a[href="#${activeSection}"]`
        ) as NodeListOf<HTMLAnchorElement>;
        activeLinks.forEach((link) => link.classList.add("active"));
      } else {
        // If no section is active (we're at the top), activate Home link
        const homeLinks = document.querySelectorAll(
          `a[href="#home"]`
        ) as NodeListOf<HTMLAnchorElement>;
        homeLinks.forEach((link) => link.classList.add("active"));
      }
    }

    // Update active link on scroll
    window.addEventListener("scroll", updateActiveLink);

    // Initial active link update
    updateActiveLink();

    // Close mobile menu on escape key
    document.addEventListener("keydown", function (e: KeyboardEvent) {
      if (e.key === "Escape" && mobileSidebar?.classList.contains("active")) {
        closeMobileMenu();
      }
    });
  });
</script>
