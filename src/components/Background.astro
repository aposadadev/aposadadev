<div class="cyberpunk-background">
  <!-- Capa de fondo más lenta (parallax layer 1) -->
  <div class="parallax-layer parallax-back">
    <!-- Efectos de neón principales -->
    <div class="neon-glow glow-1"></div>
    <div class="neon-glow glow-2"></div>
    <div class="neon-glow glow-3"></div>
    <div class="neon-glow glow-4"></div>

    <!-- Grid cyberpunk -->
    <div class="cyber-grid"></div>
  </div>

  <!-- Capa media (parallax layer 2) -->
  <div class="parallax-layer parallax-mid">
    <!-- Líneas de código flotantes -->
    <div class="code-line line-1">
      <span class="code-text">const developer = new Creative();</span>
    </div>
    <div class="code-line line-2">
      <span class="code-text">while(coding) &#123; dreams++; &#125;</span>
    </div>
    <div class="code-line line-3">
      <span class="code-text">function buildFuture() &#123;</span>
    </div>
  </div>

  <!-- Capa delantera (parallax layer 3) -->
  <div class="parallax-layer parallax-front">
    <!-- Efectos de partículas -->
    <div class="particle particle-1"></div>
    <div class="particle particle-2"></div>
    <div class="particle particle-3"></div>
    <div class="particle particle-4"></div>
    <div class="particle particle-5"></div>
    <div class="particle particle-6"></div>
  </div>
</div>

<style>
  .cyberpunk-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    pointer-events: none;
    z-index: -10;
    overflow: hidden;
  }

  /* Capas de parallax */
  .parallax-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    will-change: transform;
  }

  .parallax-back {
    transform: translateZ(-3px) scale(1.3);
  }

  .parallax-mid {
    transform: translateZ(-2px) scale(1.2);
  }

  .parallax-front {
    transform: translateZ(-1px) scale(1.1);
  }

  /* Efectos de resplandor neón intenso */
  .neon-glow {
    position: absolute;
    border-radius: 50%;
    filter: blur(40px);
    animation: pulse-glow 3s ease-in-out infinite alternate;
  }

  .glow-1 {
    width: 400px;
    height: 400px;
    background: radial-gradient(circle, #00ffff 0%, transparent 70%);
    top: 10%;
    left: -10%;
    animation-duration: 4s;
    opacity: 0.4;
  }

  .glow-2 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle, #ff00ff 0%, transparent 70%);
    top: 60%;
    right: -5%;
    animation-duration: 5s;
    animation-delay: -1s;
    opacity: 0.3;
  }

  .glow-3 {
    width: 500px;
    height: 500px;
    background: radial-gradient(circle, #8b00ff 0%, transparent 70%);
    bottom: -20%;
    left: 30%;
    animation-duration: 6s;
    animation-delay: -2s;
    opacity: 0.2;
  }

  .glow-4 {
    width: 350px;
    height: 350px;
    background: radial-gradient(circle, #4f46e5 0%, transparent 70%);
    top: 30%;
    right: 20%;
    animation-duration: 4.5s;
    animation-delay: -0.5s;
    opacity: 0.25;
  }

  /* Líneas de código flotantes */
  .code-line {
    position: fixed;
    font-family: "Courier New", monospace;
    font-size: 14px;
    opacity: 0;
    animation: code-float 8s linear infinite;
    z-index: -5;
  }

  .code-text {
    color: #00ffff;
    text-shadow:
      0 0 5px #00ffff,
      0 0 10px #00ffff,
      0 0 15px #00ffff;
    white-space: nowrap;
  }

  .line-1 {
    top: 20vh;
    left: 10vw;
    animation-delay: 0s;
  }

  .line-2 {
    top: 50vh;
    right: 15vw;
    animation-delay: -3s;
  }

  .line-2 .code-text {
    color: #ff00ff;
    text-shadow:
      0 0 5px #ff00ff,
      0 0 10px #ff00ff,
      0 0 15px #ff00ff;
  }

  .line-3 {
    bottom: 30vh;
    left: 20vw;
    animation-delay: -6s;
  }

  .line-3 .code-text {
    color: #4f46e5;
    text-shadow:
      0 0 5px #4f46e5,
      0 0 10px #4f46e5,
      0 0 15px #4f46e5;
  }

  /* Partículas brillantes */
  .particle {
    position: absolute;
    width: 3px;
    height: 3px;
    background: #00ffff;
    border-radius: 50%;
    box-shadow:
      0 0 6px #00ffff,
      0 0 12px #00ffff;
    animation: particle-float 6s linear infinite;
  }

  .particle-1 {
    top: 15%;
    left: 25%;
    animation-delay: 0s;
  }

  .particle-2 {
    top: 45%;
    left: 70%;
    background: #ff00ff;
    box-shadow:
      0 0 6px #ff00ff,
      0 0 12px #ff00ff;
    animation-delay: -2s;
  }

  .particle-3 {
    top: 75%;
    left: 40%;
    background: #4f46e5;
    box-shadow:
      0 0 6px #4f46e5,
      0 0 12px #4f46e5;
    animation-delay: -4s;
  }

  .particle-4 {
    top: 35%;
    left: 85%;
    animation-delay: -1s;
  }

  .particle-5 {
    top: 65%;
    left: 15%;
    background: #8b00ff;
    box-shadow:
      0 0 6px #8b00ff,
      0 0 12px #8b00ff;
    animation-delay: -3s;
  }

  .particle-6 {
    top: 25%;
    left: 60%;
    background: #ff6600;
    box-shadow:
      0 0 6px #ff6600,
      0 0 12px #ff6600;
    animation-delay: -5s;
  }

  /* Grid cyberpunk */
  .cyber-grid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(
        rgba(0, 255, 255, 0.1) 1px,
        transparent 1px
      ),
      linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 80px 80px;
    opacity: 0.3;
    animation: grid-pulse 3s ease-in-out infinite alternate;
  }

  /* Línea de escaneo */
  /*
  .scan-line {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(
      90deg,
      transparent,
      #00ffff,
      transparent
    );
    box-shadow: 0 0 20px #00ffff;
    animation: scan 4s linear infinite;
  }
  */

  /* Animaciones */
  @keyframes pulse-glow {
    0% {
      transform: scale(1);
      opacity: 0.3;
    }
    100% {
      transform: scale(1.1);
      opacity: 0.6;
    }
  }

  @keyframes code-float {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  @keyframes particle-float {
    0% {
      transform: translateY(0) translateX(0);
      opacity: 0;
    }
    20% {
      opacity: 1;
    }
    80% {
      opacity: 1;
    }
    100% {
      transform: translateY(-100px) translateX(50px);
      opacity: 0;
    }
  }

  @keyframes grid-pulse {
    0% {
      opacity: 0.2;
    }
    100% {
      opacity: 0.4;
    }
  }

  /*
  @keyframes scan {
    0% {
      top: 0%;
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
    100% {
      top: 100%;
      opacity: 0;
    }
  }
  */

  /* Responsive - Mobile First */
  @media (max-width: 767px) {
    .neon-glow {
      opacity: 0.2;
      filter: blur(20px);
    }

    .code-line {
      display: none;
    }

    .cyber-grid {
      opacity: 0.1;
      background-size: 40px 40px;
    }

    .particle {
      display: none;
    }
  }

  /* Tablet */
  @media (min-width: 768px) and (max-width: 1023px) {
    .neon-glow {
      opacity: 0.3;
    }

    .code-line {
      font-size: 12px;
    }

    .cyber-grid {
      opacity: 0.15;
      background-size: 60px 60px;
    }
  }

  /* Desktop */
  @media (min-width: 1024px) {
    .neon-glow {
      opacity: 0.4;
    }

    .code-line {
      font-size: 14px;
    }

    .cyber-grid {
      opacity: 0.3;
      background-size: 80px 80px;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const parallaxBack = document.querySelector(".parallax-back");
    const parallaxMid = document.querySelector(".parallax-mid");
    const parallaxFront = document.querySelector(".parallax-front");

    function updateParallax() {
      const scrolled = window.pageYOffset;
      const rate1 = scrolled * -0.3; // Capa trasera más lenta
      const rate2 = scrolled * -0.5; // Capa media
      const rate3 = scrolled * -0.7; // Capa delantera más rápida

      if (parallaxBack && parallaxBack instanceof HTMLElement) {
        parallaxBack.style.transform = `translateY(${rate1}px) translateZ(-3px) scale(1.3)`;
      }
      if (parallaxMid && parallaxMid instanceof HTMLElement) {
        parallaxMid.style.transform = `translateY(${rate2}px) translateZ(-2px) scale(1.2)`;
      }
      if (parallaxFront && parallaxFront instanceof HTMLElement) {
        parallaxFront.style.transform = `translateY(${rate3}px) translateZ(-1px) scale(1.1)`;
      }
    }

    // Optimización con requestAnimationFrame
    let ticking = false;
    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
        setTimeout(() => {
          ticking = false;
        }, 16);
      }
    }

    window.addEventListener("scroll", requestTick);
  });
</script>
