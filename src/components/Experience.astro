---
// Experience Component
const experiences = [
  {
    date: "2024 - Present",
    position: "Software Engineer",
    company: "Momenge",
    description:
      "Developing an instant messaging application using Fastify, PostgreSQL, React Native and Socket.io. Implementing real-time event logic, multimedia handling, and account recovery systems.",
  },
  {
    date: "2021 - 2024",
    position: "Full Stack Developer",
    company: "WeAre Dev",
    description:
      "Designed and developed a remittance platform from scratch using Node.js, React, and PostgreSQL. Led migration of legacy systems for online payments and loan management, modernizing critical financial infrastructure.",
  },
  {
    date: "2020 - 2021",
    position: "Full Stack Developer",
    company: "O.S Group",
    description:
      "Built a comprehensive platform for credit management and payment processing using NestJS and Vue.js. Focused on creating secure, scalable financial solutions with robust user interfaces.",
  },
  {
    date: "2019 - 2020",
    position: "Web & Mobile Developer",
    company: "PLM Group",
    description:
      "Developed web and mobile applications for El Dorado Airport's official website. Integrated services for users, flights, and COVID surveys, handling high-traffic airport operations.",
  },
  {
    date: "2018 - 2019",
    position: "Lead Software Developer",
    company: "Sumimedical",
    description:
      "Led development of comprehensive healthcare software with patient management, inventory control, real-time chat, and multi-database integration (SQL Server, PostgreSQL, MySQL).",
  },
];
---

<section
  id="experience"
  class="py-8 md:py-16 lg:py-24 relative z-10 bg-white/[0.01] experience-section"
>
  <div
    class="mx-auto w-full max-width-experience px-3 sm:px-4 md:px-8 lg:px-12"
  >
    <!-- Section Header -->
    <div class="mb-8 md:mb-12 text-center">
      <h2
        class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold mb-4 flex items-center justify-center gap-2 sm:gap-3 lg:gap-4 text-white flex-wrap"
      >
        <span
          class="bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent text-xl sm:text-2xl md:text-3xl lg:text-4xl font-normal"
          >02.</span
        >
        Experience
      </h2>
      <div
        class="w-20 sm:w-24 md:w-28 lg:w-32 h-0.5 bg-gradient-to-r from-cyan-400 to-purple-500 mx-auto rounded-full"
      >
      </div>
    </div>

    <!-- Experience Content -->
    <div class="grid gap-10 md:gap-12 lg:gap-16">
      <!-- Introduction -->
      <div
        class="text-center max-w-full lg:max-w-4xl xl:max-w-5xl mx-auto px-2 sm:px-0"
      >
        <p
          class="text-sm sm:text-base md:text-lg lg:text-xl text-white/80 leading-relaxed lg:leading-loose"
        >
          With over 7 years of experience in software development, I've had the
          opportunity to work across various industries and technologies. From
          healthcare systems to financial platforms, I've contributed to
          building robust, scalable solutions that serve real-world needs.
        </p>
      </div>

      <!-- Experience Timeline -->
      <div class="relative">
        <div
          class="timeline-container relative pl-6 sm:pl-8 lg:pl-0 max-w-full sm:max-w-2xl lg:max-w-4xl xl:max-w-6xl mx-auto"
        >
          {
            experiences.map((experience, index) => (
              <div
                class={`timeline-item relative mb-6 lg:mb-8 ml-3 sm:ml-4 lg:ml-0 ${index >= 3 ? "hidden-experience opacity-0 overflow-hidden" : ""}`}
                style={
                  index >= 3
                    ? "max-height: 0; margin-bottom: 0; transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);"
                    : "transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);"
                }
              >
                <div
                  class={`timeline-marker absolute bg-cyan-400 rounded-full border-2 sm:border-4 border-black/50 shadow-[0_0_0_2px_rgba(0,212,255,0.3)] sm:shadow-[0_0_0_4px_rgba(0,212,255,0.3)] z-10 ${index >= 3 ? "hidden-marker opacity-0" : ""}`}
                  style="transition: opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1);"
                />
                <div class="timeline-content bg-white/5 border border-white/10 rounded-lg sm:rounded-xl lg:rounded-2xl p-4 sm:p-5 lg:p-6 xl:p-7 backdrop-blur-sm transition-all duration-300 relative overflow-hidden mr-2 sm:mr-0 hover:bg-white/8 hover:border-cyan-400/30 hover:translate-x-1 sm:hover:translate-x-2 lg:hover:-translate-y-1">
                  <div class="absolute top-0 left-0 w-1 h-full bg-gradient-to-b from-cyan-400 to-purple-500 opacity-0 hover-accent transition-opacity duration-300" />
                  <div class="text-cyan-400 text-xs sm:text-sm font-medium mb-1.5">
                    {experience.date}
                  </div>
                  <h4 class="text-white text-base sm:text-lg md:text-xl lg:text-2xl font-semibold mb-1 leading-tight">
                    {experience.position}
                  </h4>
                  <p class="text-white/70 text-sm sm:text-base md:text-lg font-medium mb-2.5 sm:mb-3">
                    {experience.company}
                  </p>
                  <p class="text-white/80 text-sm sm:text-base leading-relaxed">
                    {experience.description}
                  </p>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Expand/Collapse Button -->
        <div class="flex justify-center mt-6 lg:mt-8">
          <button
            id="toggleExperiences"
            class="group relative px-6 py-3 bg-gradient-to-r from-cyan-400/20 to-purple-500/20 border border-cyan-400/30 rounded-lg backdrop-blur-sm transition-all duration-300 hover:from-cyan-400/30 hover:to-purple-500/30 hover:border-cyan-400/50 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-cyan-400/50"
          >
            <span
              class="text-white font-medium text-sm sm:text-base flex items-center gap-2"
            >
              <span id="toggleText">Ver m√°s experiencias</span>
              <svg
                id="toggleIcon"
                class="w-4 h-4 transition-transform duration-300 group-hover:translate-y-0.5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"></path>
              </svg>
            </span>
            <!-- Gradient background effect on hover -->
            <div
              class="absolute inset-0 bg-gradient-to-r from-cyan-400/10 to-purple-500/10 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 -z-10"
            >
            </div>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Intersection Observer for viewport-triggered animations
  document.addEventListener("DOMContentLoaded", () => {
    const experienceSection = document.querySelector(".experience-section");

    // Ensure the element exists
    if (!experienceSection) return;

    // Check if user prefers reduced motion
    const prefersReducedMotion = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;

    if (prefersReducedMotion) {
      // If user prefers reduced motion, show section immediately
      experienceSection.classList.add("animate");
    } else {
      // Create intersection observer
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              // Add animation class when section enters viewport
              entry.target.classList.add("animate");
              // Stop observing this element once it's animated
              observer.unobserve(entry.target);
            }
          });
        },
        {
          // Trigger when 20% of the section is visible
          threshold: 0.2,
          // Add some margin to trigger slightly before entering viewport
          rootMargin: "0px 0px -50px 0px",
        }
      );

      // Observe the entire experience section
      observer.observe(experienceSection);
    }

    // Experience expand/collapse functionality
    const toggleButton = document.getElementById("toggleExperiences");
    const toggleText = document.getElementById("toggleText");
    const toggleIcon = document.getElementById("toggleIcon");
    const hiddenExperiences = document.querySelectorAll(".hidden-experience");

    let isExpanded = false;

    if (toggleButton && hiddenExperiences.length > 0) {
      toggleButton.addEventListener("click", () => {
        isExpanded = !isExpanded;

        if (isExpanded) {
          // Show experiences with staggered animation
          hiddenExperiences.forEach((experience, index) => {
            const marker = experience.querySelector(".timeline-marker");
            const experienceEl = experience as HTMLElement;

            setTimeout(() => {
              experienceEl.style.maxHeight = "350px";
              experienceEl.style.marginBottom = "1.5rem";
              experienceEl.style.opacity = "1";

              // Show marker too
              if (marker) {
                (marker as HTMLElement).style.opacity = "1";
                marker.classList.remove("opacity-0");
                marker.classList.add("opacity-100");
              }
            }, index * 200);
          });
        } else {
          // Hide experiences immediately
          hiddenExperiences.forEach((experience, index) => {
            const marker = experience.querySelector(".timeline-marker");
            const experienceEl = experience as HTMLElement;

            experienceEl.style.maxHeight = "0";
            experienceEl.style.marginBottom = "0";
            experienceEl.style.opacity = "0";

            // Hide marker too
            if (marker) {
              (marker as HTMLElement).style.opacity = "0";
              marker.classList.remove("opacity-100");
              marker.classList.add("opacity-0");
            }
          });
        }

        // Update button text and icon
        if (isExpanded) {
          if (toggleText) toggleText.textContent = "Ver menos";
          if (toggleIcon) toggleIcon.style.transform = "rotate(180deg)";
        } else {
          if (toggleText) toggleText.textContent = "Ver m√°s experiencias";
          if (toggleIcon) toggleIcon.style.transform = "rotate(0deg)";
        }
      });
    }
  });
</script>

<style>
  /* Estilos que no se pueden replicar con Tailwind */
  .max-width-experience {
    max-width: 1250px;
  }

  /* Timeline line - gradiente complejo */
  .timeline-container::before {
    content: "";
    position: absolute;
    left: 0.75rem;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(180deg, #00d4ff 0%, #9c40ff 50%, #ff006e 100%);
  }

  /* Timeline marker positioning - hidden on mobile */
  .timeline-marker,
  .timeline-marker.hidden-marker,
  .hidden-marker {
    display: none;
  }

  /* Smooth expand/collapse animation for experiences */
  .timeline-item {
    will-change: max-height, opacity, margin;
  }

  /* Specific animation for hidden experiences */
  .hidden-experience {
    will-change: max-height, opacity, margin;
  }

  /* Ensure markers are positioned correctly */
  .timeline-marker {
    will-change: opacity;
  }

  /* Hover accent line */
  .timeline-content:hover .hover-accent {
    opacity: 1;
  }

  /* Connecting lines for desktop zigzag - gradientes complejos */
  .timeline-content::after {
    content: "";
    position: absolute;
    top: 1.5rem;
    right: -2rem;
    width: 2rem;
    height: 2px;
    background: linear-gradient(
      90deg,
      rgba(0, 212, 255, 0.5),
      rgba(0, 212, 255, 0.2)
    );
    z-index: 1;
  }

  /* Responsive adjustments */
  @media (min-width: 480px) {
    .timeline-container::before {
      left: 1rem;
    }
    /* Keep markers hidden on tablet */
    .timeline-marker,
    .timeline-marker.hidden-marker,
    .hidden-marker {
      display: none;
    }
  }

  @media (min-width: 1024px) {
    /* Desktop zigzag layout */
    .timeline-container::before {
      left: 50%;
      transform: translateX(-50%);
    }

    /* Show markers only on desktop */
    .timeline-marker,
    .timeline-marker.hidden-marker,
    .hidden-marker {
      display: block;
      position: absolute;
      left: 50% !important;
      transform: translateX(-50%);
      width: 16px !important;
      height: 16px !important;
    }

    .timeline-item {
      width: 100%;
      display: flex;
      justify-content: flex-end;
      align-items: flex-start;
      margin-left: 0;
    }

    .timeline-item:nth-child(even) {
      justify-content: flex-start;
    }

    .timeline-item:nth-child(even) .timeline-content {
      margin-left: 2rem;
      margin-right: 0;
    }

    .timeline-content {
      width: 45%;
      margin-right: 2rem;
    }

    .timeline-item:nth-child(even) .timeline-content::after {
      left: -2rem;
      right: auto;
      background: linear-gradient(
        90deg,
        rgba(0, 212, 255, 0.2),
        rgba(0, 212, 255, 0.5)
      );
    }
  }

  @media (min-width: 1200px) {
    .timeline-content {
      width: 42%;
    }

    .timeline-content::after {
      width: 2.5rem;
      right: -2.5rem;
    }

    .timeline-item:nth-child(even) .timeline-content::after {
      left: -2.5rem;
      width: 2.5rem;
    }
  }

  /* Animaciones de entrada */
  @media (prefers-reduced-motion: no-preference) and (max-width: 1023px) {
    .timeline-item {
      opacity: 0;
      transform: translateY(30px);
      transition:
        opacity 0.6s ease,
        transform 0.6s ease;
    }

    .experience-section.animate .timeline-item {
      opacity: 1;
      transform: translateY(0);
    }

    .experience-section.animate .timeline-item:nth-child(1) {
      transition-delay: 0.1s;
    }
    .experience-section.animate .timeline-item:nth-child(2) {
      transition-delay: 0.2s;
    }
    .experience-section.animate .timeline-item:nth-child(3) {
      transition-delay: 0.3s;
    }
    .experience-section.animate .timeline-item:nth-child(4) {
      transition-delay: 0.4s;
    }
    .experience-section.animate .timeline-item:nth-child(5) {
      transition-delay: 0.5s;
    }
  }

  /* Zigzag animation for desktop */
  @media (prefers-reduced-motion: no-preference) and (min-width: 1024px) {
    .timeline-item .timeline-content {
      opacity: 0;
      transition:
        opacity 0.8s ease-out,
        transform 0.8s ease-out;
    }

    .timeline-item:nth-child(odd) .timeline-content {
      transform: translateX(-50px);
    }

    .timeline-item:nth-child(even) .timeline-content {
      transform: translateX(50px);
    }

    .experience-section.animate .timeline-item .timeline-content {
      opacity: 1;
      transform: translateX(0);
    }

    .experience-section.animate .timeline-item:nth-child(1) .timeline-content {
      transition-delay: 0.2s;
    }
    .experience-section.animate .timeline-item:nth-child(2) .timeline-content {
      transition-delay: 0.4s;
    }
    .experience-section.animate .timeline-item:nth-child(3) .timeline-content {
      transition-delay: 0.6s;
    }
    .experience-section.animate .timeline-item:nth-child(4) .timeline-content {
      transition-delay: 0.8s;
    }
    .experience-section.animate .timeline-item:nth-child(5) .timeline-content {
      transition-delay: 1s;
    }
  }

  /* Touch device optimizations */
  @media (hover: none) and (pointer: coarse) {
    .timeline-content:hover {
      transform: none;
    }
  }
</style>
